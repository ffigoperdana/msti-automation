version: '3.8'

services:
  backend-blue:
    image: ${DOCKER_USERNAME}/backend:${IMAGE_TAG}
    container_name: msti-backend-blue
    restart: unless-stopped
    stop_grace_period: 30s
    stop_signal: SIGTERM
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - INFLUX_URL=${INFLUX_URL}
      - INFLUX_TOKEN=${INFLUX_TOKEN}
      - APPLY_MIGRATIONS=false
      - PORT=3001
      - WEBHOOK_PORT=3002
      - ENVIRONMENT=blue
    volumes:
      - ./ansible-config:/app/ansible-config:ro
    networks:
      - traefik-public
      - msti-blue
    labels:
      - "traefik.enable=false"  # Will be enabled when active
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.backend-blue.rule=PathPrefix(`/api`)"
      - "traefik.http.services.backend-blue.loadbalancer.server.port=3001"
      - "traefik.http.services.backend-blue.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.backend-blue.loadbalancer.healthcheck.interval=10s"
      - "traefik.http.services.backend-blue.loadbalancer.healthcheck.timeout=5s"
      - "deployment.environment=blue"
      - "deployment.version=${IMAGE_TAG}"
      - "deployment.timestamp=${DEPLOYMENT_TIMESTAMP}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://192.168.238.10:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - postgres

  frontend-blue:
    image: ${DOCKER_USERNAME}/frontend:${IMAGE_TAG}
    container_name: msti-frontend-blue
    restart: unless-stopped
    stop_grace_period: 10s
    stop_signal: SIGTERM
    environment:
      - ENVIRONMENT=blue
    ports:
      - "5172:80"
    networks:
      - traefik-public
    labels:
      - "traefik.enable=false"  # Will be enabled when active
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.frontend-blue.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend-blue.loadbalancer.server.port=80"
      - "deployment.environment=blue"
      - "deployment.version=${IMAGE_TAG}"
      - "deployment.timestamp=${DEPLOYMENT_TIMESTAMP}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://192.168.238.10"]
      interval: 30s
      timeout: 10s
      retries: 3

  webhook-blue:
    image: ${DOCKER_USERNAME}/backend:${IMAGE_TAG}
    container_name: msti-webhook-blue
    restart: unless-stopped
    stop_grace_period: 30s
    stop_signal: SIGTERM
    command: ["/sbin/tini", "--", "node", "src/webhook_server.js"]
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - WEBHOOK_PORT=3002
      - ENVIRONMENT=blue
    networks:
      - traefik-public
      - msti-blue
    labels:
      - "traefik.enable=false"  # Will be enabled when active
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.webhook-blue.rule=PathPrefix(`/webhook`)"
      - "traefik.http.services.webhook-blue.loadbalancer.server.port=3002"
      - "traefik.http.services.webhook-blue.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.webhook-blue.loadbalancer.healthcheck.interval=10s"
      - "deployment.environment=blue"
      - "deployment.version=${IMAGE_TAG}"
      - "deployment.timestamp=${DEPLOYMENT_TIMESTAMP}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://192.168.238.10:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - postgres

  postgres:
    image: postgres:15-alpine
    container_name: msti-postgres
    restart: unless-stopped
    stop_grace_period: 60s
    stop_signal: SIGINT
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - msti-blue
      - msti-green
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
    driver: local

networks:
  traefik-public:
    external: true
  msti-blue:
    driver: bridge
    name: msti-blue
  msti-green:
    driver: bridge
    name: msti-green 